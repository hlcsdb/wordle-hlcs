{"ast":null,"code":"var _jsxFileName = \"/Users/chloe/Documents/GitHub/wordle-hlcs/src/components/modals/InfoModal.tsx\",\n    _s = $RefreshSig$();\n\nimport { Cell } from '../grid/Cell';\nimport { BaseModal } from './BaseModal';\nimport { CONFIG } from '../../constants/config';\nimport { useTranslation } from 'react-i18next';\nimport 'i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InfoModal = _ref => {\n  _s();\n\n  let {\n    isOpen,\n    handleClose\n  } = _ref;\n  const {\n    t\n  } = useTranslation();\n  const firstExampleWord = t('firstExampleWord', {\n    returnObjects: true\n  });\n  const secondExampleWord = t('secondExampleWord', {\n    returnObjects: true\n  });\n  const thirdExampleWord = t('thirdExampleWord', {\n    returnObjects: true\n  });\n  return /*#__PURE__*/_jsxDEV(BaseModal, {\n    title: t('howToPlay'),\n    isOpen: isOpen,\n    handleClose: handleClose,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm text-gray-500\",\n      children: t('instructions', {\n        tries: CONFIG.tries\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-1 mt-4\",\n      children: Array.isArray(firstExampleWord) && firstExampleWord.map(el => {\n        if (el.highlight) {\n          return /*#__PURE__*/_jsxDEV(Cell, {\n            value: el.letter,\n            status: \"correct\"\n          }, el.letter, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 22\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(Cell, {\n            value: el.letter\n          }, el.letter, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 22\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm text-gray-500\",\n      children: t('correctSpotInstructions')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-1 mt-4\",\n      children: Array.isArray(secondExampleWord) && secondExampleWord.map(el => {\n        if (el.highlight) {\n          return /*#__PURE__*/_jsxDEV(Cell, {\n            value: el.letter,\n            status: \"present\"\n          }, el.letter, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 22\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(Cell, {\n            value: el.letter\n          }, el.letter, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 22\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm text-gray-500\",\n      children: t('wrongSpotInstructions')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-1 mt-4\",\n      children: Array.isArray(thirdExampleWord) && thirdExampleWord.map(el => {\n        if (el.highlight) {\n          return /*#__PURE__*/_jsxDEV(Cell, {\n            value: el.letter,\n            status: \"absent\"\n          }, el.letter, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 22\n          }, this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(Cell, {\n            value: el.letter\n          }, el.letter, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 22\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-sm text-gray-500\",\n      children: t('notInWordInstructions')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InfoModal, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = InfoModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoModal\");","map":{"version":3,"sources":["/Users/chloe/Documents/GitHub/wordle-hlcs/src/components/modals/InfoModal.tsx"],"names":["Cell","BaseModal","CONFIG","useTranslation","InfoModal","isOpen","handleClose","t","firstExampleWord","returnObjects","secondExampleWord","thirdExampleWord","tries","Array","isArray","map","el","highlight","letter"],"mappings":"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","sourcesContent":["import { Cell } from '../grid/Cell'\nimport { BaseModal } from './BaseModal'\nimport { CONFIG } from '../../constants/config'\nimport { useTranslation } from 'react-i18next'\nimport 'i18next'\n\ntype Props = {\n  isOpen: boolean\n  handleClose: () => void\n}\n\ninterface Letter {\n  letter: string\n  highlight: boolean\n}\n\nexport const InfoModal = ({ isOpen, handleClose }: Props) => {\n  const { t } = useTranslation()\n  const firstExampleWord: Letter[] = t('firstExampleWord', {\n    returnObjects: true,\n  })\n  const secondExampleWord: Letter[] = t('secondExampleWord', {\n    returnObjects: true,\n  })\n  const thirdExampleWord: Letter[] = t('thirdExampleWord', {\n    returnObjects: true,\n  })\n  return (\n    <BaseModal title={t('howToPlay')} isOpen={isOpen} handleClose={handleClose}>\n      <p className=\"text-sm text-gray-500\">\n        {t('instructions', { tries: CONFIG.tries })}\n      </p>\n\n      <div className=\"flex justify-center mb-1 mt-4\">\n        {Array.isArray(firstExampleWord) &&\n          firstExampleWord.map((el: Letter) => {\n            if (el.highlight) {\n              return <Cell key={el.letter} value={el.letter} status=\"correct\" />\n            } else {\n              return <Cell key={el.letter} value={el.letter} />\n            }\n          })}\n      </div>\n      <p className=\"text-sm text-gray-500\">{t('correctSpotInstructions')}</p>\n      <div className=\"flex justify-center mb-1 mt-4\">\n        {Array.isArray(secondExampleWord) &&\n          secondExampleWord.map((el) => {\n            if (el.highlight) {\n              return <Cell key={el.letter} value={el.letter} status=\"present\" />\n            } else {\n              return <Cell key={el.letter} value={el.letter} />\n            }\n          })}\n      </div>\n      <p className=\"text-sm text-gray-500\">{t('wrongSpotInstructions')}</p>\n\n      <div className=\"flex justify-center mb-1 mt-4\">\n        {Array.isArray(thirdExampleWord) &&\n          thirdExampleWord.map((el) => {\n            if (el.highlight) {\n              return <Cell key={el.letter} value={el.letter} status=\"absent\" />\n            } else {\n              return <Cell key={el.letter} value={el.letter} />\n            }\n          })}\n      </div>\n      <p className=\"text-sm text-gray-500\">{t('notInWordInstructions')}</p>\n    </BaseModal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}