{"ast":null,"code":"var _jsxFileName = \"/Users/chloe/Documents/GitHub/wordle-hlcs/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { InformationCircleIcon } from '@heroicons/react/outline';\nimport { ChartBarIcon } from '@heroicons/react/outline';\nimport { TranslateIcon } from '@heroicons/react/outline';\nimport { useState, useEffect } from 'react';\nimport { Alert } from './components/alerts/Alert';\nimport { Grid } from './components/grid/Grid';\nimport { Keyboard } from './components/keyboard/Keyboard';\nimport { AboutModal } from './components/modals/AboutModal';\nimport { InfoModal } from './components/modals/InfoModal';\nimport { StatsModal } from './components/modals/StatsModal';\nimport { TranslateModal } from './components/modals/TranslateModal';\nimport { isWordInWordList, isWinningWord, solution } from './lib/words';\nimport { addStatsForCompletedGame, loadStats } from './lib/stats';\nimport { loadGameStateFromLocalStorage, saveGameStateToLocalStorage } from './lib/localStorage';\nimport { CONFIG } from './constants/config';\nimport ReactGA from 'react-ga';\nimport '@bcgov/bc-sans/css/BCSans.css';\nimport './i18n';\nimport { withTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ALERT_TIME_MS = 2000;\n\nconst App = _ref => {\n  _s();\n\n  let {\n    t,\n    i18n\n  } = _ref;\n  const [currentGuess, setCurrentGuess] = useState([]);\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false);\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const [isI18nModalOpen, setIsI18nModalOpen] = useState(false);\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false);\n  const [isGameLost, setIsGameLost] = useState(false);\n  const [successAlert, setSuccessAlert] = useState('');\n  const [guesses, setGuesses] = useState(() => {\n    const loaded = loadGameStateFromLocalStorage();\n\n    if ((loaded === null || loaded === void 0 ? void 0 : loaded.solution) !== solution) {\n      return [];\n    }\n\n    const gameWasWon = loaded.guesses.map(guess => guess.join('')).includes(solution);\n\n    if (gameWasWon) {\n      setIsGameWon(true);\n    }\n\n    if (loaded.guesses.length === CONFIG.tries && !gameWasWon) {\n      setIsGameLost(true);\n    }\n\n    return loaded.guesses;\n  });\n  const TRACKING_ID = CONFIG.googleAnalytics;\n\n  if (TRACKING_ID && process.env.NODE_ENV !== 'test') {\n    ReactGA.initialize(TRACKING_ID);\n    ReactGA.pageview(window.location.pathname);\n  }\n\n  const [stats, setStats] = useState(() => loadStats());\n  useEffect(() => {\n    saveGameStateToLocalStorage({\n      guesses,\n      solution\n    });\n  }, [guesses]);\n  useEffect(() => {\n    if (isGameWon) {\n      const WIN_MESSAGES = t('winMessages', {\n        returnObjects: true\n      });\n      setSuccessAlert(WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]);\n      setTimeout(() => {\n        setSuccessAlert('');\n        setIsStatsModalOpen(true);\n      }, ALERT_TIME_MS);\n    }\n\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true);\n      }, ALERT_TIME_MS);\n    }\n  }, [isGameWon, isGameLost, t]);\n\n  const onChar = value => {\n    if (currentGuess.length < CONFIG.wordLength && guesses.length < CONFIG.tries && !isGameWon) {\n      let newGuess = currentGuess.concat([value]);\n      setCurrentGuess(newGuess);\n    }\n  };\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1));\n  };\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return;\n    }\n\n    if (!(currentGuess.length === CONFIG.wordLength)) {\n      setIsNotEnoughLetters(true);\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false);\n      }, ALERT_TIME_MS);\n    }\n\n    if (!isWordInWordList(currentGuess.join(''))) {\n      setIsWordNotFoundAlertOpen(true);\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false);\n      }, ALERT_TIME_MS);\n    }\n\n    const winningWord = isWinningWord(currentGuess.join(''));\n\n    if (currentGuess.length === CONFIG.wordLength && guesses.length < CONFIG.tries && !isGameWon) {\n      setGuesses([...guesses, currentGuess]);\n      setCurrentGuess([]);\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length));\n        return setIsGameWon(true);\n      }\n\n      if (guesses.length === CONFIG.tries - 1) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1));\n        setIsGameLost(true);\n      }\n    }\n  };\n\n  let translateElement = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 26\n  }, this);\n\n  if (CONFIG.availableLangs.length > 1) {\n    translateElement = /*#__PURE__*/_jsxDEV(TranslateIcon, {\n      className: \"h-6 w-6 cursor-pointer\",\n      onClick: () => setIsI18nModalOpen(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"py-8 max-w-7xl mx-auto sm:px-6 lg:px-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex w-80 mx-auto items-center mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl grow font-bold\",\n        children: t('gameName', {\n          language: CONFIG.language\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), translateElement, /*#__PURE__*/_jsxDEV(InformationCircleIcon, {\n        className: \"h-6 w-6 cursor-pointer\",\n        onClick: () => setIsInfoModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartBarIcon, {\n        className: \"h-6 w-6 cursor-pointer\",\n        onClick: () => setIsStatsModalOpen(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      guesses: guesses,\n      currentGuess: currentGuess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      onChar: onChar,\n      onDelete: onDelete,\n      onEnter: onEnter,\n      guesses: guesses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TranslateModal, {\n      isOpen: isI18nModalOpen,\n      handleClose: () => setIsI18nModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n      isOpen: isInfoModalOpen,\n      handleClose: () => setIsInfoModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatsModal, {\n      isOpen: isStatsModalOpen,\n      handleClose: () => setIsStatsModalOpen(false),\n      guesses: guesses,\n      gameStats: stats,\n      isGameLost: isGameLost,\n      isGameWon: isGameWon,\n      handleShare: () => {\n        setSuccessAlert(t('gameCopied'));\n        return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AboutModal, {\n      isOpen: isAboutModalOpen,\n      handleClose: () => setIsAboutModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"mx-auto mt-8 flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 select-none\",\n      onClick: () => setIsAboutModalOpen(true),\n      children: t('about')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: t('notEnoughLetters'),\n      isOpen: isNotEnoughLetters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: t('wordNotFound'),\n      isOpen: isWordNotFoundAlertOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: t('solution', {\n        solution\n      }),\n      isOpen: isGameLost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      message: successAlert,\n      isOpen: successAlert !== '',\n      variant: \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"BK8DsdWHpA93p2hBmLupRzYVAPs=\");\n\n_c = App;\nexport default withTranslation()(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/chloe/Documents/GitHub/wordle-hlcs/src/App.tsx"],"names":["InformationCircleIcon","ChartBarIcon","TranslateIcon","useState","useEffect","Alert","Grid","Keyboard","AboutModal","InfoModal","StatsModal","TranslateModal","isWordInWordList","isWinningWord","solution","addStatsForCompletedGame","loadStats","loadGameStateFromLocalStorage","saveGameStateToLocalStorage","CONFIG","ReactGA","withTranslation","ALERT_TIME_MS","App","t","i18n","currentGuess","setCurrentGuess","isGameWon","setIsGameWon","isInfoModalOpen","setIsInfoModalOpen","isAboutModalOpen","setIsAboutModalOpen","isNotEnoughLetters","setIsNotEnoughLetters","isStatsModalOpen","setIsStatsModalOpen","isI18nModalOpen","setIsI18nModalOpen","isWordNotFoundAlertOpen","setIsWordNotFoundAlertOpen","isGameLost","setIsGameLost","successAlert","setSuccessAlert","guesses","setGuesses","loaded","gameWasWon","map","guess","join","includes","length","tries","TRACKING_ID","googleAnalytics","process","env","NODE_ENV","initialize","pageview","window","location","pathname","stats","setStats","WIN_MESSAGES","returnObjects","Math","floor","random","setTimeout","onChar","value","wordLength","newGuess","concat","onDelete","slice","onEnter","winningWord","translateElement","availableLangs","language"],"mappings":"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","sourcesContent":["import { InformationCircleIcon } from '@heroicons/react/outline'\nimport { ChartBarIcon } from '@heroicons/react/outline'\nimport { TranslateIcon } from '@heroicons/react/outline'\nimport { useState, useEffect } from 'react'\nimport { Alert } from './components/alerts/Alert'\nimport { Grid } from './components/grid/Grid'\nimport { Keyboard } from './components/keyboard/Keyboard'\nimport { AboutModal } from './components/modals/AboutModal'\nimport { InfoModal } from './components/modals/InfoModal'\nimport { StatsModal } from './components/modals/StatsModal'\nimport { TranslateModal } from './components/modals/TranslateModal'\nimport { isWordInWordList, isWinningWord, solution } from './lib/words'\nimport { addStatsForCompletedGame, loadStats } from './lib/stats'\nimport {\n  loadGameStateFromLocalStorage,\n  saveGameStateToLocalStorage,\n} from './lib/localStorage'\n\nimport { CONFIG } from './constants/config'\nimport ReactGA from 'react-ga'\nimport '@bcgov/bc-sans/css/BCSans.css'\nimport './i18n'\nimport { withTranslation, WithTranslation } from 'react-i18next'\n\nconst ALERT_TIME_MS = 2000\n\nconst App: React.FC<WithTranslation> = ({ t, i18n }) => {\n  const [currentGuess, setCurrentGuess] = useState<Array<string>>([])\n  const [isGameWon, setIsGameWon] = useState(false)\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false)\n  const [isAboutModalOpen, setIsAboutModalOpen] = useState(false)\n  const [isNotEnoughLetters, setIsNotEnoughLetters] = useState(false)\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false)\n  const [isI18nModalOpen, setIsI18nModalOpen] = useState(false)\n  const [isWordNotFoundAlertOpen, setIsWordNotFoundAlertOpen] = useState(false)\n  const [isGameLost, setIsGameLost] = useState(false)\n  const [successAlert, setSuccessAlert] = useState('')\n  const [guesses, setGuesses] = useState<string[][]>(() => {\n    const loaded = loadGameStateFromLocalStorage()\n    if (loaded?.solution !== solution) {\n      return []\n    }\n    const gameWasWon = loaded.guesses\n      .map((guess) => guess.join(''))\n      .includes(solution)\n    if (gameWasWon) {\n      setIsGameWon(true)\n    }\n    if (loaded.guesses.length === CONFIG.tries && !gameWasWon) {\n      setIsGameLost(true)\n    }\n    return loaded.guesses\n  })\n  const TRACKING_ID = CONFIG.googleAnalytics\n\n  if (TRACKING_ID && process.env.NODE_ENV !== 'test') {\n    ReactGA.initialize(TRACKING_ID)\n    ReactGA.pageview(window.location.pathname)\n  }\n  const [stats, setStats] = useState(() => loadStats())\n\n  useEffect(() => {\n    saveGameStateToLocalStorage({ guesses, solution })\n  }, [guesses])\n\n  useEffect(() => {\n    if (isGameWon) {\n      const WIN_MESSAGES = t('winMessages', { returnObjects: true })\n      setSuccessAlert(\n        WIN_MESSAGES[Math.floor(Math.random() * WIN_MESSAGES.length)]\n      )\n      setTimeout(() => {\n        setSuccessAlert('')\n        setIsStatsModalOpen(true)\n      }, ALERT_TIME_MS)\n    }\n    if (isGameLost) {\n      setTimeout(() => {\n        setIsStatsModalOpen(true)\n      }, ALERT_TIME_MS)\n    }\n  }, [isGameWon, isGameLost, t])\n\n  const onChar = (value: string) => {\n    if (\n      currentGuess.length < CONFIG.wordLength &&\n      guesses.length < CONFIG.tries &&\n      !isGameWon\n    ) {\n      let newGuess = currentGuess.concat([value])\n      setCurrentGuess(newGuess)\n    }\n  }\n\n  const onDelete = () => {\n    setCurrentGuess(currentGuess.slice(0, -1))\n  }\n\n  const onEnter = () => {\n    if (isGameWon || isGameLost) {\n      return\n    }\n    if (!(currentGuess.length === CONFIG.wordLength)) {\n      setIsNotEnoughLetters(true)\n      return setTimeout(() => {\n        setIsNotEnoughLetters(false)\n      }, ALERT_TIME_MS)\n    }\n\n    if (!isWordInWordList(currentGuess.join(''))) {\n      setIsWordNotFoundAlertOpen(true)\n      return setTimeout(() => {\n        setIsWordNotFoundAlertOpen(false)\n      }, ALERT_TIME_MS)\n    }\n    const winningWord = isWinningWord(currentGuess.join(''))\n\n    if (\n      currentGuess.length === CONFIG.wordLength &&\n      guesses.length < CONFIG.tries &&\n      !isGameWon\n    ) {\n      setGuesses([...guesses, currentGuess])\n      setCurrentGuess([])\n\n      if (winningWord) {\n        setStats(addStatsForCompletedGame(stats, guesses.length))\n        return setIsGameWon(true)\n      }\n\n      if (guesses.length === CONFIG.tries - 1) {\n        setStats(addStatsForCompletedGame(stats, guesses.length + 1))\n        setIsGameLost(true)\n      }\n    }\n  }\n  let translateElement = <div></div>\n  if (CONFIG.availableLangs.length > 1) {\n    translateElement = (\n      <TranslateIcon\n        className=\"h-6 w-6 cursor-pointer\"\n        onClick={() => setIsI18nModalOpen(true)}\n      />\n    )\n  }\n\n  return (\n    <div className=\"py-8 max-w-7xl mx-auto sm:px-6 lg:px-8\">\n      <div className=\"flex w-80 mx-auto items-center mb-8\">\n        <h1 className=\"text-xl grow font-bold\">\n          {t('gameName', { language: CONFIG.language })}\n        </h1>\n        {translateElement}\n        <InformationCircleIcon\n          className=\"h-6 w-6 cursor-pointer\"\n          onClick={() => setIsInfoModalOpen(true)}\n        />\n        <ChartBarIcon\n          className=\"h-6 w-6 cursor-pointer\"\n          onClick={() => setIsStatsModalOpen(true)}\n        />\n      </div>\n      <Grid guesses={guesses} currentGuess={currentGuess} />\n      <Keyboard\n        onChar={onChar}\n        onDelete={onDelete}\n        onEnter={onEnter}\n        guesses={guesses}\n      />\n      <TranslateModal\n        isOpen={isI18nModalOpen}\n        handleClose={() => setIsI18nModalOpen(false)}\n      />\n      <InfoModal\n        isOpen={isInfoModalOpen}\n        handleClose={() => setIsInfoModalOpen(false)}\n      />\n      <StatsModal\n        isOpen={isStatsModalOpen}\n        handleClose={() => setIsStatsModalOpen(false)}\n        guesses={guesses}\n        gameStats={stats}\n        isGameLost={isGameLost}\n        isGameWon={isGameWon}\n        handleShare={() => {\n          setSuccessAlert(t('gameCopied'))\n          return setTimeout(() => setSuccessAlert(''), ALERT_TIME_MS)\n        }}\n      />\n      <AboutModal\n        isOpen={isAboutModalOpen}\n        handleClose={() => setIsAboutModalOpen(false)}\n      />\n\n      <button\n        type=\"button\"\n        className=\"mx-auto mt-8 flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 select-none\"\n        onClick={() => setIsAboutModalOpen(true)}\n      >\n        {t('about')}\n      </button>\n\n      <Alert message={t('notEnoughLetters')} isOpen={isNotEnoughLetters} />\n      <Alert message={t('wordNotFound')} isOpen={isWordNotFoundAlertOpen} />\n      <Alert message={t('solution', { solution })} isOpen={isGameLost} />\n      <Alert\n        message={successAlert}\n        isOpen={successAlert !== ''}\n        variant=\"success\"\n      />\n    </div>\n  )\n}\n\nexport default withTranslation()(App)\n"]},"metadata":{},"sourceType":"module"}