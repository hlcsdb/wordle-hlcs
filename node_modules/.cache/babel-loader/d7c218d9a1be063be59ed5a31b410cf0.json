{"ast":null,"code":"import { ORTHOGRAPHY } from '../constants/orthography';\nimport { CONFIG } from '../constants/config';\n\nfunction escapeRegExp(string) {\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nexport const SORTED_ORTHOGRAPHY = [...ORTHOGRAPHY].sort(_c = (a, b) => b.length - a.length);\n_c2 = SORTED_ORTHOGRAPHY;\nconst joinedCharacters = CONFIG.escapeSpecialCharacters ? SORTED_ORTHOGRAPHY.map(x => escapeRegExp(x)).join('|') : SORTED_ORTHOGRAPHY.join('|');\nexport const ORTHOGRAPHY_PATTERN = new RegExp('(' + joinedCharacters + ')', 'g');\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SORTED_ORTHOGRAPHY$[...ORTHOGRAPHY].sort\");\n$RefreshReg$(_c2, \"SORTED_ORTHOGRAPHY\");","map":{"version":3,"sources":["/Users/chloe/Documents/GitHub/wordle-hlcs/src/lib/tokenizer.ts"],"names":["ORTHOGRAPHY","CONFIG","escapeRegExp","string","replace","SORTED_ORTHOGRAPHY","sort","a","b","length","joinedCharacters","escapeSpecialCharacters","map","x","join","ORTHOGRAPHY_PATTERN","RegExp"],"mappings":"AAAA,SAASA,WAAT,QAA4B,0BAA5B;AACA,SAASC,MAAT,QAAuB,qBAAvB;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAAsC;AACpC;AACA,SAAOA,MAAM,CAACC,OAAP,CAAe,qBAAf,EAAsC,MAAtC,CAAP,CAFoC,CAEiB;AACtD;;AAED,OAAO,MAAMC,kBAAkB,GAAG,CAAC,GAAGL,WAAJ,EAAiBM,IAAjB,MAChC,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,MAAF,GAAWF,CAAC,CAACE,MADS,CAA3B;MAAMJ,kB;AAIb,MAAMK,gBAAgB,GAAGT,MAAM,CAACU,uBAAP,GACrBN,kBAAkB,CAACO,GAAnB,CAAwBC,CAAD,IAAOX,YAAY,CAACW,CAAD,CAA1C,EAA+CC,IAA/C,CAAoD,GAApD,CADqB,GAErBT,kBAAkB,CAACS,IAAnB,CAAwB,GAAxB,CAFJ;AAIA,OAAO,MAAMC,mBAAmB,GAAG,IAAIC,MAAJ,CAAW,MAAMN,gBAAN,GAAyB,GAApC,EAAyC,GAAzC,CAA5B","sourcesContent":["import { ORTHOGRAPHY } from '../constants/orthography'\nimport { CONFIG } from '../constants/config'\n\nfunction escapeRegExp(string: string) {\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport const SORTED_ORTHOGRAPHY = [...ORTHOGRAPHY].sort(\n  (a, b) => b.length - a.length\n)\n\nconst joinedCharacters = CONFIG.escapeSpecialCharacters\n  ? SORTED_ORTHOGRAPHY.map((x) => escapeRegExp(x)).join('|')\n  : SORTED_ORTHOGRAPHY.join('|')\n\nexport const ORTHOGRAPHY_PATTERN = new RegExp('(' + joinedCharacters + ')', 'g')\n"]},"metadata":{},"sourceType":"module"}